class KMerTokenizer:
    def __init__(self, k):
        self.k = k
        self.vocab = {}
        self.id_to_token = []
        self.token_to_id = {}

    def tokenize_sequence(self, sequence):
        kmers = [sequence[i:i+self.k] for i in range(0, len(sequence), self.k)]
        return kmers

    def build_vocab(self, sequences):
        all_kmers = []
        for sequence in sequences:
            all_kmers.extend(self.tokenize_sequence(sequence))
        token_count = {}
        for kmer in all_kmers:
            if kmer in token_count:
                token_count[kmer] += 1
            else:
                token_count[kmer] = 1
        sorted_tokens = sorted(token_count.items(), key=lambda x: x[1], reverse=True)
        for token, _ in sorted_tokens:
            self.token_to_id[token] = len(self.token_to_id)
            self.id_to_token.append(token)
        self.vocab = self.token_to_id

    def encode_sequence(self, sequence):
        encoded_sequence = []
        kmers = self.tokenize_sequence(sequence)
        for kmer in kmers:
            if kmer in self.token_to_id:
                encoded_sequence.append(self.token_to_id[kmer])
            else:
                encoded_sequence.append(len(self.vocab))
        return encoded_sequence

    def decode_sequence(self, encoded_sequence):
        decoded_sequence = ''.join([self.id_to_token[token_id] for token_id in encoded_sequence])
        return decoded_sequence

import json
import collections

class KMerTokenizer:
    def __init__(self, k):
        self.k = k
        self.vocab = {}
        self.id_to_token = []
        self.token_to_id = {}

    def tokenize_sequence(self, sequence):
        kmers = [sequence[i:i+self.k] for i in range(0, len(sequence), self.k)]
        return kmers

    def build_vocab(self, sequences):
        all_kmers = []
        for sequence in sequences:
            all_kmers.extend(self.tokenize_sequence(sequence))
        token_count = {}
        for kmer in all_kmers:
            if kmer in token_count:
                token_count[kmer] += 1
            else:
                token_count[kmer] = 1
        sorted_tokens = sorted(token_count.items(), key=lambda x: x[1], reverse=True)
        for token, _ in sorted_tokens:
            self.token_to_id[token] = len(self.token_to_id)
            self.id_to_token.append(token)
        self.vocab = self.token_to_id

    def train(self, corpus, max_merge_operations):
        for _ in range(max_merge_operations):
            token_counts = collections.Counter()
            for sequence in corpus:
                kmers = self.tokenize_sequence(sequence)
                token_counts.update(kmers)
            most_common_pair = max(token_counts.items(), key=lambda x: x[1])[0]
            self.vocab[''.join(most_common_pair)] = len(self.vocab)
            self._update_token_mappings()

    def encode_sequence(self, sequence):
        encoded_sequence = []
        kmers = self.tokenize_sequence(sequence)
        for kmer in kmers:
            if kmer in self.token_to_id:
                encoded_sequence.append(self.token_to_id[kmer])
            else:
                encoded_sequence.append(len(self.vocab))
        return encoded_sequence

    def decode_sequence(self, encoded_sequence):
        decoded_sequence = ''.join([self.id_to_token[token_id] for token_id in encoded_sequence])
        return decoded_sequence

    def _update_token_mappings(self):
        self.id_to_token = [token for token, _ in sorted(self.vocab.items(), key=lambda x: x[1])]
        self.token_to_id = {token: i for i, token in enumerate(self.id_to_token)}

    def save_vocab(self, filename):
        with open(filename, 'w') as file:
            json.dump(self.vocab, file)

    def load_vocab(self, filename):
        with open(filename, 'r') as file:
            self.vocab = json.load(file)
        self._update_token_mappings()

# Example usage:
corpus = """GGGGAAGCAAGGCGGAGTTGGGCAGCTCGTGTTCAATGGGTAGAGTTTCAGGCTGGGGTGATGGAAGGGTGCTGGAAATGAGTGGTAGTGATGGCGGCACAACAGTGTGAATCTACTTAATCCCACTGAACTGTATGCTGAAAAATGGTTTAGACGGTGAATTTTAGGTTATGTATGTTTTACCACAATTTTTAAAAAGCTAGTGAAAAGCTGGTAAAAAGAAAGAAAAGAGGCTTTTTTAAAAAGTTAAATATATAAAAAGAGCATCATCAGTCCAAAGTCCAGCAGTTGTCCCTCCTGGAATCCGTTGGCTTGCCTCCGGCATTTTTGGCCCTTGCCTTTTAGGGTTGCCAGATTAAAAGACAGGATGCCCAGCTAGTTTGAATTTTAGATAAACAACGAATAATTTCGTAGCATAAATATGTCCCAAGCTTAGTTTGGGACATACTTATGCTAAAAAACATTATTGGTTGTTTATCTGAGATTCAGAATTAAGCATTTTATATTTTATTTGCTGCCTCTGGCCACCCTACTCTCTTCCTAACACTCTCTCCCTCTCCCAGTTTTGTCCGCCTTCCCTGCCTCCTCTTCTGGGGGAGTTAGATCGAGTTGTAACAAGAACATGCCACTGTCTCGCTGGCTGCAGCGTGTGGTCCCCTTACCAGAGGTAAAGAAGAGATGGATCTCCACTCATGTTGTAGACAGAATGTTTATGTCCTCTCCAAATGCTTATGTTGAAACCCTAACCCCTAATGTGATGGTATGTGGAGATGGGCCTTTGGTAGGTAATTACGGTTAGATGAGGTCATGGGGTGGGGCCCTCATTATAGATCTGGTAAGAAAAGAGAGCATTGTCTCTGTGTCTCCCTCTCTCTCTCTCTCTCTCTCTCTCATTTCTCTCTATCTCATTTCTCTCTCTCTCGCTATCTCATTTTTCTCTCTCTCTCTTTCTCTCCTCTGTCTTTTCCCACCAAGTGAGGATGCGAAGAGAAGGTGGCTGTCTGCAAACCAGGAAGAGAGCCCTCACCGGGAACCCGTCCAGCTGCCACCTTGAACTTGGACTTCCAAGCCTCCAGAACTGTGAGGGATAAATGTATGATTTTAAAGTCGCCCAGTGTGTGGTATTTTGTTTTGACTAATACAACCTGAAAACATTTTCCCCTCACTCCACCTGAGCAATATCTGAGTGGCTTAAGGTACTCAGGACACAACAAAGGAGAAATGTCCCATGCACAAGGTGCACCCATGCCTGGGTAAAGCAGCCTGGCACAGAGGGAAGCACACAGGCTCAGGGATCTGCTATTCATTCTTTGTGTGACCCTGGGCAAGCCATGAATGGAGCTTCAGTCACCCCATTTGTAATGGGATTTAATTGTGCTTGCCCTGCCTCCTTTTGAGGGCTGTAGAGAAAAGATGTCAAAGTATTTTGTAATCTGGCTGGGCGTGGTGGCTCATGCCTGTAATCCTAGCACTTTGGTAGGCTGACGCGAGAGGACTGCTTGAGCCCAAGAGTTTGAGATCAGCCTGGGCAATATTGTGAGATTCCATCTCTACAAAAATAAAATAAAATAGCCAGTCATGGTGTCACACACCTGTAGTCCCAGCTACATGGGAGGCTGAGGCGGGAGGATCACTTGAGCTTGGGAGATCGAGGCTGCAGTGAGCTATGATTGTACCACTGCACTCCAGGCTGGGCGACAGAGAGAGACCCTGTCTCAGAAAAAAAAAAAAAAGTACTTTGTAATCTGTAAGGTTTATTTCAACACACACAAAAAAAGTGTATATGCTCCACGATGCCTGTGAATATACACACACACCACATCATATACCAAGCCTGGCTGTGTCTTCTCACAAATGCACTGCTAGGCACCACCCCCAGTTCTAGAATCACACCAGCCAGTTCACCCTCCAGATGGTTCACCCTCAACTTCATAAAAGTTCCCTACCTAATCTACTGACAGGCTCATCCCCGACCTAATTTTAAAGATTTCCTAGGAGCTGCAGTGGGAATCCTGGACCTCAGCCTGGACAAAGAACAGCTGCAGGTCATTCTCATGTGTGGACACAGAAGCTCTGCCTGCCTTTGCTGGCCAGCTGGGCTGAGCGGGCCTGGGAATTAAGGCTGCAGGGTTGGTCCCAGGCAGTCTTGCTGAAGCTTGCCACATCCCCCAGCCTCCTGGATTTGCCAGGATCCAAGAGCATGGACTTTAGGAATTCCTGGTGGAGGAGTGAAGAAAATGTGACAGGGTGTCCTAAGCCCCGATCTACAGGAAGAAAACTGGAAATAAGACTGAGGACTTAGTTTAAGATGTTCCTACTCAGCCTCTAGCTTTTGTGCTACAGTTCTGGGAACAGACTCCTCTCTCCTGAAAACCACTTCCCTCCGCAGCATTAGATTTCACCAAGATGTCTTGCTTGTGGGAAAGACTTCCAAGGATGCCTGGAGAGAGGAGGATGGAAATGTCCTGCTCTCTAAACAGATAGACAGATGCAGCCAGACAGAAAATAGTTTATCTTGCTGAGGTTTCTAATGTATTTGAAAGAGGCCTGGGTCTAGAAGTCTACCCAGAGGGCTCTGTGTTGTGCACGCAAAGATAAGAACCTTCCCTGTGGGAGTTCCAGAGCCAGTTTTCATAAACACCCATCGGTGACTGTGTTCAGAGTGAGTTCACACCATCCTGACCTGCCCTGAGTTAGACCTTACATGGTCTTCCTCCTCTAGGAAGCCTCTGCAGCCCAGGAACCTCCCCTTATCGGAAATGAACAGCATTTGAAGCTTCACCAGACAGACCAGACAGCTTAGCCCTCGTGTTGTGCCATGTGGGTTGTTCTCTGAGAGGCAGGAGAGCATAGTGGTTACTAGGAAGGGAAGGACTTTGGGACTAGACTGCCTCGGCTGGAGTCCTCTTTCTGCTTCATAGCCACGTGATCCTAGGCATGTTACCTGTGCCTCAGTTTTCACTCTGTCAATATGTAATAACTGAATCTGTCTTTGTGGTGAGGATTCAGTGAGTTAACATATTTGAAGTGCTTAAAAATGAGGCTTGTGTCCATAGATTAATGAGTGAATACACAAATGGTGATATGGACATACAGTGGAGTATTAGTCATAAAAAGGAAGGCAGAGCTGATCCATGGCACCATGTGACAGAACCTCAAAAGCATTAGGTTAAGTGGAAGAAGCCAGACACAGGTCACCTATTGTGTAATTCCATTTATAGGAAATATACAGAATATGTAAATCCGTGGAGAAAGAAAGCCGATTTCCAGGGGCTAAGGGGAGGGGAGAATGGGAAGTGGCTGCTTCATGGGTACAAGGTTTCATTTTGAGCTGATGAAAATGTTTTGGAACTACATAGAGATAGTGTTGGCACAACATGGTGAATGTACTGAATGCCACTGATTGTTCAATTTAAAATGGTCAAACTTATATGAATTTCACCTCCATTAAAAAAAAAAAAAAAGGACCAGATGTGGTTGCTCACACCCATAATCCCAACACTTTGGAAAAAGGTGAAAGTTTTTTTTTCTTTTTTTTTTTATATACTTAAGTTCTAGGGTACATGTGCATAATGTGCAGGTTGGATACATAGATATGCGTGTGCCATGTTGGTTTGCTGCACCCATCAACTTGTCATTTACATTAGGTATTTCTTCTAATGCTATCCCTCCCCCAGCCCCCCACCCACTGACAGGCCCCAGTGTATGATGTTCTCTGCCCCATGTCCAAGCGTTCTCATTGTTCAATTCCCACCTGTGAGTGAGAACATGCAGTGTTTGGTTTTCTGTCTTTGTGATAGTTTGCTCAGAATGATGGTTTCCAGCTTCATCCATGTCCCTGCAAAGGACATGAACTCATCCTTTTTAATGGCTGCATAGTATCCCATGGTATATATGTGCCACATTCTCTTAATCCAGTCTGTCATTGATGGACATTTGGGTTGGTTCAAAGTCTTTGCTATTGTGAATACTGCCACAATAAACATACATGTGCATGTGTCTTTATAGTAGCACGATTTATAATCCTTTGGGTATATACCCTAAGACCTGGGACGCATTTAAAGCAGTGTGTAAAGAGACATTTATAGCACTAAATGCCCACAAGAGACCTCTGCCTGAGAACGTGGGTTTCAGCCTAAGAGTTGTAATATGTGTGCCCATTCACAGGTGCTGCATCAGAGTCCCAGGTGGGAAGAAGGCAAGCATACACAAAAATGGTAAAAGGCAGAAAGGAGCCCAGTCTCGTTCTTTTTAAGAAGTTTTCCTAAGAATCTCCACCCAGCGACTTGCTCTCACATCTTCTTGGCCAGCACTGGACCACACAACTCCTTCTAGATACAGAGGAGTCCTAGGATTCTATGAGAAAGAAGGGGAGGGTGGGCAAAGGGCAGCCAGCTGTGCAGCATCTGCTGGAGACACCTAACCCTTGGTGGAGGGGTTGTGGTGCTGGGAGAAGGCTTTCTGGACGGTGTGACAGCAGAGATAAACTTAAAGGCCAAGTAGGAGTTACCCTGGTGAAGCAGGGCAGGGTTACAAGCATTCCAGCAACATGAAGCAGCAGGAGTGTTTTAATTAAAAGAAGGCAGTTGCTGTAACCAACTATAAACAAATAAAGGCTTAAACACAATGGAAGTTTATTTCTCACTAAGGGAACATCCAAATCCATGATACTTTAAGTCAGGGACCCAGGTTCCTCCCATCTATGGTTCTGCCATCACTAATCTGGGTCTTCCACAATTGCCGTGCTCCTTGGAGGTGGGAAGAGCAGGCGGAGGACACGTGGGAGGTTTTAGGGACAAGCCTGGAGGCAGCATGCGTCACTCCCATGCAGAGTCCATTGGCCAATGCTGGCTCCGATGGCCACATCTCACTGCAGGGGCAGCTGGGAAATACAGTCTGGCTGTCTACCCAGGAGGAAGAGCAGCCAGTTTCTGCTGCTGATGATCAGGAGGTGGAGAAAATGTTCAGTCAGGCAGGGAGTGGGAATAGACAAGACCACAAGCAGCTTGGTGCCTCTGAAAGGGAGAGGGGTGGAGGGGAGACTAGAGAGGTGGGTAGGAATACTGGATTCCACTGACCACGTGCTGGATGTCACGCTTAGCCCTCCTGCTCTGTGCCGGGTTAGGCACCTGGTGTTTTACGTACATAATCTCAATTCTGTGAGGGCATCCGACCTGTGGGAAAAGAGCTGTTTGTTTCAAATGCCAGTCCTGCTTCCTAACAAGTGTTTAGAGCTTAATCGTGTTCAAAATACATATACAATGTTTAATACTTACAAGAATTTGGTGGGGAAAATATTACCATCTTTCCCTTTTGTGATTGGAGAAAAATGAGGCTTTGAAGGGTTTAAGAACTTGCCCAAGGTCGGCCAGGTGCAGTGGCTCATGTCTATAATCCCAACACTTTGGGAGGCTGAGGTGGGAGGATCGCTTGAGGCCAGGAGTTCAAGACCAGCCTGAGCAACATAGTGAGACTTTGTCTCTATAAAAAATAAATAAATAAATAAAAACAACTTGTCCAAGGTCAGACAGGCAGCCTCTTAGTAAGCACACATATCCTCTATATTATACTACCTCTCATGGAGGATCTCCTGTGTTCTACAAATAGTCTGGACTTGAGCCAGAATGTGTTATAATCCTGGGATCACGGCCAGTGGGCTTAGAAGAAGCCATCTCTTTCTCATGCCAAGATGAGGCTCCCCCAGATTTGCTCAGACTTACCTATAGTCAGCAGCATCGGGGGTCAGGAAAGACTTCACGAAGCCATAAATGCATCCTTCTCGGGGCAGCACCTGGCTCTCCCAGGTGAGAGAGGACTCCATTTTCACAGGCAGGCGTGGGAGCTTCAGCACCCATCTCTGGGCCCAGAATGACCCACTGGAGACCTTACAGCTCTCCTGTCACCCCCAATTCCTGCCCCCTCTGCAGCCTTGGAGGAGAATGGAGCTGAAGGGCCTGCCCTCTGTAGGGTGAGAAAGGGAGGCTAAAGCCTGGTGCCCACTGCCCTGGCTGCTCCGCATTGCAGGAGCTGCGCCCTTCCTTTCCTGGCACAGGGTCCACAGCCCCGAAACCCCGTTGTGTGGGAGCTGGGCACAGGGCAGCAGGACTAATCCTTGGAACAGCTCAGGGAGGATTATCCCAGCCACTGTCAGCAGCGGTGCAGCTGGCTCATTCCCATATAGGGGGAGGCCAGAGCCAGGGTGCCCTGGCTGCTCCGCATTGCAGGAGCTGCGCCCTTCCTTTCCTGGCACAGGGTCCACAGCCCCGAAACCCCGTTGTGTGGGAGCTGGGCACAGGGCAGCAGGACTAATCCTTGGAACAGCTCAGGGAGGATTATCCCAGCCACTGTCAGCAGCGGTGCAGCTGGCTCATTCCCATATAGGGGGAGGCCAGAGCCAGGGGCCTGCCACAAGTTGGAAGGCTGGGGAAGGGGAGGCCAGCAGAGGTGTCCTGGCTGTGGGTGGCTCTGAGGGGGCTCTCAGGGGTGGGGCTAAATCTCAGGGGCAGGATTATGTAAATCAAACCAATTCTAGCCACAGATTTAAAGTTTGGAAAAAAAAAAAAACCCAGCCTGGCGGAAAGAATTTAAATTATAAAAACTTAGAAGTATGGAATGTGAAATCATCCTGTAGGTGCTTATTTAACAACGAAATCATCCCGACACAATGAGCCATATGTGAAAAGTCATCCTTCCCCAACACATCCCCCAACAGGCACTCCTCAAGCCTCTCCCACCCAAGTGCTGGCATCCTCCCTGTCCTGCTTCACCTGAGACACCCCTTGTCTCATTAGACATGCAACTACGGGAGGGGTGACAGGAAGACAAGACACTATTTCCTCAGGCCCAGTTTGGTGTGGGGAGAAAGCCTCCTGATCCTGAAAGCAAGAATTTGACCAGAGCAGAAGTAATCAGTATGCAGATTGATTCTGTGGTATGTTAATGTTTATGCATAGATTATGAGGACCAGGTGAAAAGTGGGCCAGGGGAGCCAGATGTGTGTGTGAGTCATGGGTGGCTGAGATGAGGACAGGAGGGAAACTGGTTTGGAGGGTGCTGGCGATGGGGTGGGGGTGCCAGGAGGAAGGGAGGCTAGTTGTTTGAATGTCTGCATGAAAAAGCGGACGACAGCGGGGTCTGGGTGAATTCGGGCAACCATTTGGACCGTGGAGAAAACTGCCTGCGTGCGGCTGAGGACCTGCACTATTAATTTGTTTTTTAGCTAAGGCAAAGATAAATATAAAAACTGATACTCCACCCAGTTACCAGAAAACATTTAGGTATGTGTGAGACAACTTGGGTATGTGAACCTACCTTTTCAATGTAAATTCAGTGAAATCTAAGTGCAGATCCCATATTTCCAATAAAAAGGTAACATCCAAACTCAGATGTCCTATGAGTATAAAATACACAAAGATCTTCTGGACTTAGTATGAAAAGGGATTTTTTTTTTGTCAGGTACCTCACTAGTTATTTTTAAAATAGGATTGCATGTTGAAATGATAATCTTTTGGATATATTGGGTTAAATAAATTTATTATTAAAGTTAATTTCACTTAAAAATGTTTAATGTAGCTACTAGAAATTTTAAAATTAAGCATGTTGCTCACCTTATGTTTCTATTGGACGGCTCTCTCTAGATACAAAGGCTGCCAAGAGGGACCTCACTCTAGCTTCAGGGAGAAGAGAGGAATTAGCAAGGCCAAGCAGAGGCTCCTGAGGGCAGGGCCAAGGGCGGCTTGGTGGGGTGGGGATGGGATGCACAGAGATAACTCCAACCCTTAAGAAGGTGTTTCCTAGAGCAGGCTGTGACCTGTCAGTTTATATACTGAGGCTTAGGAGCCTCTTGGATGCCCCCAGATCTGCACCCCTGAATTGCCCTGTGCCCCTGCCGTCTTTGTTCCTGTGCTGGCATAGTGGTCTCACCTCCGGCAGTATCACCACCACTGGGCACAAGCTTCTCCAGCACAGCAACTGTGTCTTATTTCTCCTTGTACTCCCAGTGTTCACACCATGCTGCACTCACAGAAGACTCTTCGTTGATATTTTGTGGACAGAGAGAATGCCTGTGAGAGTGGGCTGAAGTGTGCGTTGGGCTCCAGAGACCTTAAGGAGGGGAGACCAGGTCCTGAGTAAAGTTGAAGGGGAGGGGCTGAGTCCTGCTAGCCAGGAGTCTCATCCCCTGGGGAAGTTCC
GCCCACAAGAGACCTCTGCCTGAGAACGTGGGTTTCAGCCTAAGAGTTGTAATATGTGTGCCCATTCACAGGTGCTGCATCAGAGTCCCAGGTGGGAAGAAGGCAAGCATACACAAAAATGGTAAAAGGCAGAAAGGAGCCCAGTCTCGTTCTTTTTAAGAAGTTTTCCTAAGAATCTCCACCCAGCGACTTGCTCTCACATCTTCTTGGCCAGCACTGGACCACACAACTCCTTCTAGATACAGAGGAGTCCTAGGATTCTATGAGAAAGAAGGGGAGGGTGGGCAAAGGGCAGCCAGCTGTGCAGCATCTGCTGGAGACACCTAACCCTTGGTGGAGGGGTTGTGGTGCTGGGAGAAGGCTTTCTGGACGGTGTGACAGCAGAGATAAACTTAAAGGCCAAGTAGGAGTTACCCTGGTGAAGCAGGGCAGGGTTACAAGCATTCCAGCAACATGAAGCAGCAGGAGTGTTTTAATTAAAAGAAGGCAGTTGCTGTAACCAACTATAAACAAATAAAGGCTTAAACACAATGGAAGTTTATTTCTCACTAAGGGAACATCCAAATCCATGATACTTTAAGTCAGGGACCCAGGTTCCTCCCATCTATGGTTCTGCCATCACTAATCTGGGTCTTCCACAATTGCCGTGCTCCTTGGAGGTGGGAAGAGCAGGCGGAGGACACGTGGGAGGTTTTAGGGACAAGCCTGGAGGCAGCATGCGTCACTCCCATGCAGAGTCCATTGGCCAATGCTGGCTCCGATGGCCACATCTCACTGCAGGGGCAGCTGGGAAATACAGTCTGGCTGTCTACCCAGGAGGAAGAGCAGCCAGTTTCTGCTGCTGATGATCAGGAGGTGGAGAAAATGTTCAGTCAGGCAGGGAGTGGGAATAGACAAGACCACAAGCAGCTTGGTGCCTCTGAAAGGGAGAGGGGTGGAGGGGAGACTAGAGAGGTGGGTAGGAATACTGGATTCCACTGACCACGTGCTGGATGTCACGCTTAGCCCTCCTGCTCTGTGCCGGGTTAGGCACCTGGTGTTTTACGTACATAATCTCAATTCTGTGAGGGCATCCGACCTGTGGGAAAAGAGCTGTTTGTTTCAAATGCCAGTCCTGCTTCCTAACAAGTGTTTAGAGCTTAATCGTGTTCAAAATACATATACAATGTTTAATACTTACAAGAATTTGGTGGGGAAAATATTACCATCTTTCCCTTTTGTGATTGGAGAAAAATGAGGCTTTGAAGGGTTTAAGAACTTGCCCAAGGTCGGCCAGGTGCAGTGGCTCATGTCTATAATCCCAACACTTTGGGAGGCTGAGGTGGGAGGATCGCTTGAGGCCAGGAGTTCAAGACCAGCCTGAGCAACATAGTGAGACTTTGTCTCTATAAAAAATAAATAAATAAATAAAAACAACTTGTCCAAGGTCAGACAGGCAGCCTCTTAGTAAGCACACATATCCTCTATATTATACTACCTCTCATGGAGGATCTCCTGTGTTCTACAAATAGTCTGGACTTGAGCCAGAATGTGTTATAATCCTGGGATCACGGCCAGTGGGCTTAGAAGAAGCCATCTCTTTCTCATGCCAAGATGAGGCTCCCCCAGATTTGCTCAGACTTACCTATAGTCAGCAGCATCGGGGGTCAGGAAAGACTTCACGAAGCCATAAATGCATCCTTCTCGGGGCAGCACCTGGCTCTCCCAGGTGAGAGAGGACTCCATTTTCACAGGCAGGCGTGGGAGCTTCAGCACCCATCTCTGGGCCCAGAATGACCCACTGGAGACCTTACAGCTCTCCTGTCACCCCCAATTCCTGCCCCCTCTGCAGCCTTGGAGGAGAATGGAGCTGAAGGGCCTGCCCTCTGTAGGGTGAGAAAGGGAGGCTAAAGCCTGGTGCCCACTGCCCTGGCTGCTCCGCATTGCAGGAGCTGCGCCCTTCCTTTCCTGGCACAGGGTCCACAGCCCCGAAACCCCGTTGTGTGGGAGCTGGGCACAGGGCAGCAGGACTAATCCTTGGAACAGCTCAGGGAGGATTATCCCAGCCACTGTCAGCAGCGGTGCAGCTGGCTCATTCCCATATAGGGGGAGGCCAGAGCCAGGGTGCCCTGGCTGCTCCGCATTGCAGGAGCTGCGCCCTTCCTTTCCTGGCACAGGGTCCACAGCCCCGAAACCCCGTTGTGTGGGAGCTGGGCACAGGGCAGCAGGACTAATCCTTGGAACAGCTCAGGGAGGATTATCCCAGCCACTGTCAGCAGCGGTGCAGCTGGCTCATTCCCATATAGGGGGAGGCCAGAGCCAGGGGCCTGCCACAAGTTGGAAGGCTGGGGAAGGGGAGGCCAGCAGAGGTGTCCTGGCTGTGGGTGGCTCTGAGGGGGCTCTCAGGGGTGGGGCTAAATCTCAGGGGCAGGATTATGTAAATCAAACCAATTCTAGCCACAGATTTAAAGTTTGGAAAAAAAAAAAAACCCAGCCTGGCGGAAAGAATTTAAATTATAAAAACTTAGAAGTATGGAATGTGAAATCATCCTGTAGGTGCTTATTTAACAACGAAATCATCCCGACACAATGAGCCATATGTGAAAAGTCATCCTTCCCCAACACATCCCCCAACAGGCACTCCTCAAGCCTCTCCCACCCAAGTGCTGGCATCCTCCCTGTCCTGCTTCACCTGAGACACCCCTTGTCTCATTAGACATGCAACTACGGGAGGGGTGACAGGAAGACAAGACACTATTTCCTCAGGCCCAGTTTGGTGTGGGGAGAAAGCCTCCTGATCCTGAAAGCAAGAATTTGACCAGAGCAGAAGTAATCAGTATGCAGATTGATTCTGTGGTATGTTAATGTTTATGCATAGATTATGAGGACCAGGTGAAAAGTGGGCCAGGGGAGCCAGATGTGTGTGTGAGTCATGGGTGGCTGAGATGAGGACAGGAGGGAAACTGGTTTGGAGGGTGCTGGCGATGGGGTGGGGGTGCCAGGAGGAAGGGAGGCTAGTTGTTTGAATGTCTGCATGAAAAAGCGGACGACAGCGGGGTCTGGGTGAATTCGGGCAACCATTTGGACCGTGGAGAAAACTGCCTGCGTGCGGCTGAGGACCTGCACTATTAATTTGTTTTTTAGCTAAGGCAAAGATAAATATAAAAACTGATACTCCACCCAGTTACCAGAAAACATTTAGGTATGTGTGAGACAACTTGGGTATGTGAACCTACCTTTTCAATGTAAATTCAGTGAAATCTAAGTGCAGATCCCATATTTCCAATAAAAAGGTAACATCCAAACTCAGATGTCCTATGAGTATAAAATACACAAAGATCTTCTGGACTTAGTATGAAAAGGGATTTTTTTTTTGTCAGGTACCTCACTAGTTATTTTTAAAATAGGATTGCATGTTGAAATGATAATCTTTTGGATATATTGGGTTAAATAAATTTATTATTAAAGTTAATTTCACTTAAAAATGTTTAATGTAGCTACTAGAAATTTTAAAATTAAGCATGTTGCTCACCTTATGTTTCTATTGGACGGCTCTCTCTAGATACAAAGGCTGCCAAGAGGGACCTCACTCTAGCTTCAGGGAGAAGAGAGGAATTAGCAAGGCCAAGCAGAGGCTCCTGAGGGCAGGGCCAAGGGCGGCTTGGTGGGGTGGGGATGGGATGCACAGAGATAACTCCAACCCTTAAGAAGGTGTTTCCTAGAGCAGGCTGTGACCTGTCAGTTTATATACTGAGGCTTAGGAGCCTCTTGGATGCCCCCAGATCTGCACCCCTGAATTGCCCTGTGCCCCTGCCGTCTTTGTTCCTGTGCTGGCATAGTGGTCTCACCTCCGGCAGTATCACCACCACTGGGCACAAGCTTCTCCAGCACAGCAACTGTGTCTTATTTCTCCTTGTACTCCCAGTGTTCACACCATGCTGCACTCACAGAAGACTCTTCGTTGATATTTTGTGGACAGAGAGAATGCCTGTGAGAGTGGGCTGAAGTGTGCGTTGGGCTCCAGAGACCTTAAGGAGGGGAGACCAGGTCCTGAGTAAAGTTGAAGGGGAGGGGCTGAGTCCTGCTAGCCAGGAGTCTCATCCCCTGGGGAAGTTCCTGCCCTGGCTGCTCCGCATTGCAGGAGCTGCGCCCTTCCTTTCCTGGCACAGGGTCCACAGCCCCGAAACCCCGTTGTGTGGGAGCTGGGCACAGGGCAGCAGGACTAATCCTTGGAACAGCTCAGGGAGGATTATCCCAGCCACTGTCAGCAGCGGTGCAGCTGGCTCATTCCCATATAGGGGGAGGCCAGAGCCAGGGGCCTGCCACAAGTTGGAAGGCTGGGGAAGGGGAGGCCAGCAGAGGTGTCCTGGCTGTGGGTGGCTCTGAGGGGGCTCTCAGGGGTGGGGCTAAATCTCAGGGGCAGGATTATGTAAATCAAACCAATTCTAGCCACAGATTTAAAGTTTGGAAAAAAAAAAAAACCCAGCCTGGCGGAAAGAATTTAAATTATAAAAACTTAGAAGTATGGAATGTGAAATCATCCTGTAGGTGCTTATTTAACAACGAAATCATCCCGACACAATGAGCCATATGTGAAAAGTCATCCTTCCCCAACACATCCCCCAACAGGCACTCCTCAAGCCTCTCCCACCCAAGTGCTGGCATCCTCCCTGTCCTGCTTCACCTGAGACACCCCTTGTCTCATTAGACATGCAACTACGGGAGGGGTGACAGGAAGACAAGACACTATTTCCTCAGGCCCAGTTTGGTGTGGGGAGAAAGCCTCCTGATCCTGAAAGCAAGAATTTGACCAGAGCAGAAGTAATCAGTATGCAGATTGATTCTGTGGTATGTTAATGTTTATGCATAGATTATGAGGACCAGGTGAAAAGTGGGCCAGGGGAGCCAGATGTGTGTGTGAGTCATGGGTGGCTGAGATGAGGACAGGAGGGAAACTGGTTTGGAGGGTGCTGGCGATGGGGTGGGGGTGCCAGGAGGAAGGGAGGCTAGTTGTTTGAATGTCTGCATGAAAAAGCGGACGACAGCGGGGTCTGGGTGAATTCGGGCAACCATTTGGACCGTGGAGAAAACTGCCTGCGTGCGGCTGAGGACCTGCACTATTAATTTGTTTTTTAGCTAAGGCAAAGATAAATATAAAAACTGATACTCCACCCAGTTACCAGAAAACATTTAGGTATGTGTGAGACAACTTGGGTATGTGAACCTACCTTTTCAATGTAAATTCAGTGAAATCTAAGTGCAGATCCCATATTTCCAATAAAAAGGTAACATCCAAACTCAGATGTCCTATGAGTATAAAATACACAAAGATCTTCTGGACTTAGTATGAAAAGGGATTTTTTTTTTGTCAGGTACCTCACTAGTTATTTTTAAAATAGGATTGCATGTTGAAATGATAATCTTTTGGATATATTGGGTTAAATAAATTTATTATTAAAGTTAATTTCACTTAAAAATGTTTAATGTAGCTACTAGAAATTTTAAAATTAAGCATGTTGCTCACCTTATGTTTCTATTGGACGGCTCTCTCTAGATACAAAGGCTGCCAAGAGGGACCTCACTCTAGCTTCAGGGAGAAGAGAGGAATTAGCAAGGCCAAGCAGAGGCTCCTGAGGGCAGGGCCAAGGGCGGCTTGGTGGGGTGGGGATGGGATGCACAGAGATAACTCCAACCCTTAAGAAGGTGTTTCCTAGAGCAGGCTGTGACCTGTCAGTTTATATACTGAGGCTTAGGAGCCTCTTGGATGCCCCCAGATCTGCACCCCTGAATTGCCCTGTGCCCCTGCCGTCTTTGTTCCTGTGCTGGCATAGTGGTCTCACCTCCGGCAGTATCACCACCACTGGGCACAAGCTTCTCCAGCACAGCAACTGTGTCTTATTTCTCCTTGTACTCCCAGTGTTCACACCATGCTGCACTCACAGAAGACTCTTCGTTGATATTTTGTGGACAGAGAGAATGCCTGTGAGAGTGGGCTGAAGTGTGCGTTGGGCTCCAGAGACCTTAAGGAGGGGAGACCAGGTCCTGAGTAAAGTTGAAGGGGAGGGGCTGAGTCCTGCTAGCCAGGAGTCTCATCCCCTGGGGAAGTTCCAGGGACCCCTCAGAAGTGCAAGGGGACGGTGTTAGTGTTAGTCCAGTAACACAGCCCAGAGCCTGCCTTCCACGTGGGTTTGACAGGAGCCTCCTAACTGCTCTTCTGCTTCCATTTTTGCCCCTTCAGTCTATTCTCAACAGGGAAGCCAGAGGCATCCTTAACCATGTCAGATCATGTGGCTCCTCAGCTCAAAGCCTCATCTCAGAGGAAAGCTCTGGTCCCTTAGAAATGGCCCAAGTGGTGACAGACAGACTCTAAGGTGAGCAGACTGTTGCTAGATATCTGGGCTCGGAGGACTCGCCACTGCTCAAAGGCAGTGAGGATTTTCGCACTAGAAGCTGGAGGACAGGGATCCTTGTTAGGTAGGAGCAGAAAGCTTAGAAAAGTGGTCTCCTGCAGTTACGTGGCAAACACATCATGTAAGTGATAAATTGGGTATGCAGTTGAGGAGATTTCCAAGTAAAATGTTGAGGATGCTGCCTGGTTTCTTCTTACTGCTTATAATATAGTGTGAGAGAAGAGAGATAAATTGAGAAAGAGACTGGTTTTTAAACTGTTAAAATTGAATCAGGACTTGATGATTTTGAAAATTGTCAGTCTCCCCACATGGAAAAAGATGCTGAAATTAACAAATGGCTTCTGAGCATGTGGCATAGGGTGTAACTGTACAGTCTTTTGTGATTATGCATAAAGATCAAAGGATGGGAGTAGCAATGAGTCACACAGAGGTCTGTTGCAAGAGATTACAAGGGTGTACCATGCAGAACCTCTCCACCAAACCTTAGGGCCCTTGGGAAGCTTCAGTGAGTTACCCTGGGGGCCATCTTGGCAGGAGCTGAAGGTAGAAAGGTAGAGTTTATCTCTAAAAGATTCATGGGTATGGCTCTTGACAAATCGACTATGAGCCCCACCGAAACCCACAGAGGACAGGCAAAGGGTTTGGGAAAGCTGTTTCACCCACAGTGCTGGCAGATTGGTCTGTAGGGGACAGAGTGCAAAATGAAAGAAGACTGTCAGAGACCCCAAACTCTGCTGTCAAGAAGAAGGCTGATAAAACTACTTGGCTGCAAACACGTGGATCTTTCGTGAGAAAAGAAGGATGACCCAGAGGCAGAAGCCCAGAAGGCAGAGCCAAGAGACATGGAATCTTCCCACATCTTAAAACCTGTTTAGGGAACACCAGCATCTGTCCAGCTGGATTTCAGAACCACCATTCCTTCATCCTTCCCCTGCTGCCTCTTTCTGAACAGCAATGTCTCAAGCTTTACCCACCATTGTGTGTTGCATATGTAGGGGGCAGATAGCTTGTATCTTTAGTTTTCCAGATCAGAGGAACATCCAAAGAAATCTGTTCTACACCTAAACCCGATTTAGATGAGATTCGGGACTGTGAGCATGAAGGGATCTCAAGAGGGGTGAATGTGTTTTGCATGCACAAGGGACAGGAGTCTTGGGGACAGAGGACAGGCTGTGGTGGCAGATACTAAGGTGACCCCCACAACCCCCACCTCTGCCATTCACACCCTTGAATAATCCCCTTCTCTGGTTGTAAGCAGAACCTGTGGCTTGCTTATGAAGGAGGCGGTATATATGTGATTCATGTACTGATCATATTGTATAAGATCACTGGCTGGATGCAGTGGCTCGTGCCTGTAATCCCAACACTTTGGGAGGCTGAGGCGGGTGGATCACCTGAGGTCAGGAGTTCGAGACCAGGCTGGCCAACATGGCAAAACCCCGCCTCTACTAAAAATACAAAAATTAGCCAGGCATAGTGGTGCACGCCTGTAATCACAGCTACTCAAGAGGCTGAAGCAGGAGAATTGCTTGAACTCAGGAGGTGGAGGTGGCAGTGAGCCAAGATCGTGCCACTGCACTCCAGCCTCAGTGACAGAGCGAGACTCTGTCTCAAAAAATAAATAAATAAAATGTTAAGATCATAACCTGTCTTTCTGGGGACTCTCTCTTGACGCCTTTGAAGAAGCAGGCTGCCATGTTGCAAGCTGCCTCATGGAGGGGATCAGCTGCGAGGAGCTAAGAGCCCCCTCCAGTCGATGCTCACCAGGAAGCTGAGGTCTTGTGTCCAGCACCCTGCATAGAA"""
sequence = "GGGGAAGCAAGGCGGAGTTGGGCAGCTCGTGTTCAATGGGTAGAGTTTCAGGCTGGGGTGATGGAAGGGTGCTGGAAATGAGTGGTAGTGATGGCGGCACAACAGTGTGAATCTACTTAA"

tokenizer = KMerTokenizer(k=4)
tokenizer.build_vocab(corpus)
tokenizer.train(corpus, max_merge_operations=10)
encoded_sequence = tokenizer.encode_sequence(sequence)
decoded_sequence = tokenizer.decode_sequence(encoded_sequence)

print(tokenizer.vocab)
print("Encoded sequence:", encoded_sequence)
print("Decoded sequence:", decoded_sequence)

# Save vocabulary to a JSON file
tokenizer.save_vocab("vocab.json")

# Load vocabulary from the JSON file
loaded_tokenizer = KMerTokenizer(k=4)
loaded_tokenizer.load_vocab("vocab.json")
print("Loaded tokenizer vocab:", loaded_tokenizer.vocab)